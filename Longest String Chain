class Solution {
    Integer dp[][]=new Integer[1001][1002];
    public int longestStrChain(String[] words) {
       Arrays.sort(words,(a, b) -> a.length()-b.length());
       return solve(0,words,-1); 
    }
    int solve(int i,String words[],int prev){
        if(i>=words.length){
            return 0;
        }
       
        if(dp[i][prev+1]!=null)return dp[i][prev+1];
        int t=0;
        if(prev==-1 || check(words[prev],words[i])){
          t=1+solve(i+1,words,i);
        }
        int nt=solve(i+1,words,prev);
        return dp[i][prev+1]=Math.max(t,nt);
    }
    boolean check(String s1, String s2) {
        if (s2.length() != s1.length() + 1) return false;
        
        int i = 0, j = 0;
        while ( i < s1.length() && j < s2.length()) {
            if (s1.charAt(i) == s2.charAt(j)) {
                i++;
                j++;
            } else {
                j++;
            }
        }
        
        return i == s1.length();
}
}
