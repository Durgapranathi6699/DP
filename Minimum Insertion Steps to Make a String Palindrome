class Solution {
       public int minInsertions(String s) {
       
       Integer dp[][]=new Integer[s.length()][s.length()];                         //memo

       return s.length() - lps(s,rev(s),s.length()-1,s.length()-1,dp);

    }
    int lps(String s1,String s2,int i,int j,Integer dp[][]){

         if(i<0 || j<0)return 0; //base

         if(dp[i][j]!=null)return dp[i][j];

         if(s1.charAt(i)==s2.charAt(j)){         //if both characters of string and reversed string matches moe both pointers
             return dp[i][j]=1+lps(s1,s2,i-1,j-1,dp);
         }else{
             return dp[i][j]=Math.max(lps(s1,s2,i-1,j,dp),lps(s1,s2,i,j-1,dp)); //else check moving one pointer at a time 
         }
    }
    String rev(String s){
        StringBuilder sb=new StringBuilder(s);
        sb.reverse();
        return sb.toString();
    }

}
//
  //  min no.of insertions = total length- longest palindromic subsequence
  // longest palindromic subsequence this can be found using longest common subsequence of given (string , reversed string)
  
