class Solution {
    int mod=1000000000 + 7;
     int [][] dp;
    public int numberOfWays(int startPos, int endPos, int k) {
        dp=new int[3000][k+1];
        
        for(int i=0;i<dp.length;i++){
          Arrays.fill(dp[i],-1);  
        }
        
        return  helper(startPos,endPos,k);
      
    }
    int  helper(int startPos, int endPos, int k){
        if(k==0){//base case
            if(startPos==endPos)
                return 1;
           return 0;
        }
        
        //to avoid -ve index we add 1000 (since k range up to 1000)
        if(dp[startPos+1000][k]!=-1){//if value is already computed ,just use it
            return dp[startPos+1000][k];
        }
        
         int a=helper(startPos+1,endPos,k-1);
         int b=helper(startPos-1,endPos,k-1);
        
        //memoization
         dp[startPos+1000][k]=(a+b)%mod;
        
         return dp[startPos+1000][k];
    }
}
