class Solution {
    public int longestPalindromeSubseq(String s) {
        Integer dp[][]=new Integer[s.length()][s.length()];
        return helper(s,rev(s),s.length()-1,s.length()-1,dp);
    }
    int helper(String s1,String s2,int i,int j,Integer dp[][]){
        if(i<0 || j<0)return 0;
        if(dp[i][j]!=null)return dp[i][j];
        if(s1.charAt(i)==s2.charAt(j)){
            return dp[i][j]=1+helper(s1,s2,i-1,j-1,dp);
        }else{
            return dp[i][j]=Math.max(helper(s1,s2,i-1,j,dp),helper(s1,s2,i,j-1,dp));
        }
    }
    String rev(String s){
       StringBuilder sb=new StringBuilder(s);
       sb.reverse();
      return sb.toString();
    
    }
}
